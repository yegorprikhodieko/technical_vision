import cv2
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
import aiofiles
import image_analysis

bot = Bot(token="7972736557:AAFoqecWUvjD6hHtQ4kpB4IM7jmeYwL0zhQ")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, —Å–Ω—è—Ç–æ–µ –Ω–∞ –≤–∞—à —Å–º–∞—Ä—Ç—Ñ–æ–Ω, –∏ —É–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Samsung S23 Ultra')."
    )

@dp.message(lambda msg: msg.photo and msg.caption)
async def handle_photo(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiofiles
        async with aiofiles.open("user_photo.jpg", "wb") as f:
            photo_bytes = await bot.download_file(file.file_path)
            await f.write(photo_bytes.read())

        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = cv2.imread("user_photo.jpg", cv2.IMREAD_GRAYSCALE)
        if image is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
            return

        sharpness = image_analysis.calculate_laplacian_variance(image)
        brightness,contrast = image_analysis.get_brightness_contrast(image)
        # sharpness = cv2.Laplacian(image, cv2.CV_64F).var()

        await message.answer(
            f"üìä –ê–Ω–∞–ª–∏–∑ —Å–Ω–∏–º–∫–∞ ({message.caption}):\n"
            f"‚Ä¢ –†–µ–∑–∫–æ—Å—Ç—å: {sharpness:.1f}/100\n"
            f"‚Ä¢ –Ø—Ä–∫–æ—Å—Ç—å: {brightness:.1f} , {contrast:.1f}\n"
            f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {min(sharpness / 20, 5.0):.1f}/5"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    dp.run_polling(bot)